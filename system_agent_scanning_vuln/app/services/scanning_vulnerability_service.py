import os
from crewai import Agent, Task, Crew, Process
from dotenv import load_dotenv


# COMPITI
# Di nuovo, testare con codice piu complesso, incollando nel main in basso codice diverso
# Eventualmente modificare agenti e task, o aggiungerne di nuovi, per rendere migliore la scansione
# Integrare con sonarqube, mettendolo a disposizione come tool per gli agenti (vedere doc crewai)




os.environ["TOGETHERAI_API_KEY"] = "c47b3fa9622715d6695302a193d0488be41d61660b82ca6502eb45c61efce2c9"
llm = "together_ai/meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo"

# SonarQube API configuration
SONARQUBE_URL = "http://your-sonarqube-instance-url"
SONARQUBE_TOKEN = "your-sonarqube-token"

def perform_scan_vulnerability(code):
    # Define agents for vulnerability scanning
    vulnerability_scanner = Agent(
        role='Vulnerability Scanner',
        goal='Scan code for potential security vulnerabilities',
        backstory="""You are an experienced security expert with a deep understanding of code vulnerabilities.
        Your expertise lies in identifying potential security risks in various programming languages.""",
        verbose=True,
        allow_delegation=False,
        llm=llm,
    )

    sonarqube_integrator = Agent(
        role='SonarQube Integrator',
        goal='Integrate vulnerability scan results with SonarQube',
        backstory="""You are an expert in integrating security tools with SonarQube.
        You specialize in interpreting scan results and mapping them to SonarQube's issue tracking system.""",
        verbose=True,
        allow_delegation=True,
        llm=llm,
    )

    # Create tasks for vulnerability scanning
    task1 = Task(
        description=f"""Scan the given code for potential security vulnerabilities.
        Identify common issues such as SQL injection, XSS, CSRF, and other OWASP Top 10 vulnerabilities.
        Code: {code}""",
        expected_output="Detailed report on identified vulnerabilities",
        agent=vulnerability_scanner,
    )

    task2 = Task(
        description="""Using the vulnerability scan results, integrate the findings with SonarQube.
        Map identified issues to SonarQube's rule set and prepare data for API submission.""",
        expected_output="SonarQube-compatible vulnerability report",
        agent=sonarqube_integrator
    )

    # Instantiate the crew for vulnerability scanning
    scanning_crew = Crew(
        agents=[vulnerability_scanner, sonarqube_integrator],
        tasks=[task1, task2],
        verbose=True,
        process=Process.sequential
    )

    # Execute the vulnerability scan
    scan_result = scanning_crew.kickoff()


    return scan_result


if __name__ == "__main__":
    load_dotenv()
    sample_code = """
    def unsafe_query(user_input):
        query = "SELECT * FROM users WHERE id = " + user_input
        execute_query(query)
    """
    scan_result = perform_scan_vulnerability(sample_code)
    print(scan_result)
